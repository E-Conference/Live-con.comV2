<?php

namespace fibe\EventBundle\Repository;

use Doctrine\ORM\EntityRepository;
use fibe\EventBundle\Entity\Category;

/**
 * ConfEventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VEventRepository extends EntityRepository
{
  /**
   * @param $params
   * @param $currentMainEvent
   *
   * @return mixed
   */
  public function filtering($params, $currentMainEvent)
  {
    $qb = $this->getAllOrderByStartAtQueryBuilder();

    if (isset($params['only_instant']))
    {
      $qb
        ->andWhere('vevent.isInstant = 1');
    }
    else
    {
      $qb
        ->andWhere('vevent.isInstant = 0');
    }

    if (isset($params['summary']))
    {
      $qb
        ->andWhere('vevent.id = :summary')
        ->setParameter('summary', $params['summary']);
    }

    if (isset($params['location']))
    {
      $qb
        ->leftJoin('vevent.location', 'loc')
        ->andWhere('loc.id = :loc')
        ->setParameter('loc', $params['location']);
    }
    if (isset($params['category']))
    {
      $qb
        ->leftJoin('vevent.category', 'cat')
        ->andWhere('cat.id = :cat_id')
        ->setParameter('cat_id', $params['category']);
    }

    $query = $qb->getQuery();

    return $query->execute();

  }


  /**
   * getAllOrderByStartAtQueryBuilder
   *
   * @return \Doctrine\ORM\QueryBuilder
   */
  public function getAllOrderByStartAtQueryBuilder()
  {
    $qb = $this->createQueryBuilder('confevent');
    $qb
      ->orderBy('vevent.startAt', 'ASC')
      ->addOrderBy('vevent.location', 'ASC');

    return $qb;
  }

  /**
   * getAllOrderByStartAtQuery
   *
   * @return \Doctrine\ORM\Query|\Doctrine\ORM\QueryBuilder
   */
  public function getAllOrderByStartAtQuery()
  {
    $qb = $this->getAllOrderByStartAtQueryBuilder();

    return is_null($qb) ? $qb : $qb->getQuery();
  }

  /**
   * getAllOrderByStartAt
   *
   * @return array
   */
  public function getAllOrderByStartAt()
  {
    $q = $this->getAllOrderByStartAtQuery();

    return is_null($q) ? array() : $q->getResult();
  }

  /**
   * extractQueryBuilder
   *
   * @param array $params
   *
   * @return \Doctrine\ORM\QueryBuilder
   */
  public function extractQueryBuilder($params)
  {
    $qb = $this->getAllOrderByStartAtQueryBuilder();

    if (isset($params['only_instant']))
    {
      $qb
        ->andWhere('vevent.isInstant = true');
    }
    else
    {
      $qb
        ->andWhere('vevent.isInstant = false');
    }

    if (isset($params['id']))
    {
      $qb
        ->andWhere('vevent.id = :id')
        ->setParameter('id', $params['id']);
    }

    if (isset($params['ids']))
    {
      $qb
        ->andWhere($qb->expr()->in('vevent.id', $params['ids']));
    }

    if (isset($params['before']))
    {
      $qb
        ->andWhere('vevent.startAt < :before')
        ->setParameter('before', new \DateTime($params['before']));
    }

    if (isset($params['after']))
    {
      $qb
        ->andWhere('vevent.endAt > :after')
        ->setParameter('after', new \DateTime($params['after']));
    }


    if (isset($params['category_id']))
    {
      $qb
        ->leftJoin('vevent.category', 'c')
        ->andWhere('c.id = :cat_id')
        ->setParameter('cat_id', $params['category_id']);
    }

    if (isset($params['category_ids']))
    {
      $qb
        ->leftJoin('vevent.categories', 'cs')
        ->andWhere($qb->expr()->in('cs.id', $params['category_ids']));
    }

    if (isset($params['category_name']))
    {
      $qb
        ->leftJoin('vevent.categories', 'c')
        ->andWhere('c.name = :category_name')
        ->setParameter('category_name', $params['category_name']);
    }

    if (isset($params['parent_category_id']))
    {
      $qb
        ->leftJoin('vevent.categories', 'pc')
        ->andWhere('pc.parent = :parent_id')
        ->setParameter('parent_id', $params['parent_category_id']);
    }

    if (isset($params['parent_category_ids']))
    {
      $qb
        ->leftJoin('vevent.categories', 'pcs')
        ->andWhere($qb->expr()->in('pcs.parent', $params['parent_category_ids']));
    }

    if (isset($params['ancestor_category_id']))
    {
      $qb
        ->leftJoin('vevent.categories', 'pc')
        ->andWhere($qb->expr()->like('pc.tree', sprintf(
          "'%%%d%s'",
          $params['ancestor_category_id'],
          Category::getTreeSeparator()
        )));
    }

    if (isset($params['ancestor_category_ids']))
    {
      $qb->leftJoin('vevent.categories', 'pcs');
      $temp = array();
      foreach ($params['ancestor_category_ids'] as $id)
      {
        $temp[] = $qb->expr()->like('pcs.tree', sprintf(
          "'%%%d%s'",
          $id,
          Category::getTreeSeparator()
        ));
      }
      $qb->andWhere(call_user_func_array(array($qb->expr(), 'orx'), $temp));
    }

    if (isset($params['location_id']))
    {
      $qb
        ->andWhere('vevent.location = :location_id')
        ->setParameter('location_id', $params['location_id']);
    }

    if (isset($params['location_ids']))
    {
      $qb
        ->andWhere($qb->expr()->in('vevent.location', $params['location_ids']));
    }


    if (isset($params['location_name']))
    {
      $qb
        ->leftJoin('vevent.location', 'lct')
        ->andWhere('lct.name = :location_name')
        ->setParameter('location_name', $params['location_name']);
    }


    if (isset($params['parent_id']))
    {
      $qb
        ->andWhere('vevent.parent = :parent_id')
        ->setParameter('parent_id', $params['parent_id']);
    }

    if (isset($params['child_id']))
    {
      $qb
        ->leftJoin('vevent.children', 'child')
        ->andWhere('child.id = :child_id')
        ->setParameter('child_id', $params['child_id']);
    }

    if (isset($params['role_type']))
    {
      $qb
        ->leftJoin('confevent.roles', 'ro')
        ->leftJoin('ro.type', 'rot')
        ->andWhere('rot.name = :role_type')
        ->setParameter('role_type', $params['role_type']);;
    }

    return $qb;
  }

  /**
   * extractQuery
   *
   * @param array $params
   *
   * @return \Doctrine\ORM\Query|\Doctrine\ORM\QueryBuilder
   */
  public function extractQuery($params)
  {
    $qb = $this->extractQueryBuilder($params);

    return is_null($qb) ? $qb : $qb->getQuery();
  }

  /**
   * extract
   *
   * @param array $params
   *
   * @return array
   */
  public function extract($params)
  {
    $q = $this->extractQuery($params);

    return is_null($q) ? array() : $q->getResult();
  }
}
